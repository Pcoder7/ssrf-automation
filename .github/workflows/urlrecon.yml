name: Url Recon with Gf 

on:
  schedule:
    - cron: "0 10 * * *"  # Runs every day at 10:00 AM UTC
  workflow_dispatch:

permissions:
    contents: write

jobs:
  # JOB 1: Prepares the list of domains to create the parallel job matrix.
  setup-matrix:
    runs-on: ubuntu-latest
    outputs:
      domains: ${{ steps.set-matrix.outputs.domains }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Create domain matrix from domains.txt
        id: set-matrix
        run: |
          # Exit gracefully if domains.txt does not exist
          if [ ! -f domains.txt ]; then
            echo "domains.txt file not found! Skipping."
            echo "domains=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          

          SANITIZED_DOMAINS=$(awk '!/^\s*#/ && !/^\s*$/ { gsub(/^[ \t]+|[ \t]+$/, ""); print }' domains.txt)
          
          JSON_DOMAINS=$(echo "$SANITIZED_DOMAINS" | jq -R . | jq -sc .)
          
          echo "domains=$JSON_DOMAINS" >> $GITHUB_OUTPUT
          echo "Matrix created: $JSON_DOMAINS"

  # JOB 2: Runs recon tools in parallel for each domain from the matrix.
  recon-parallel:
    needs: setup-matrix
    # Only run this job if the setup job actually found domains to process.
    if: needs.setup-matrix.outputs.domains != '[]'
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false # IMPORTANT: If one domain scan fails, the others will continue.
      matrix:
        domain: ${{ fromJson(needs.setup-matrix.outputs.domains) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'


      - name: Cache Go modules and build cache
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
            
      
      - name: Install uforall
        run: |
           wget https://github.com/rix4uni/timelimitx/releases/download/v0.0.1/timelimitx-linux-amd64-0.0.1.tgz
           tar -xvzf timelimitx-linux-amd64-0.0.1.tgz
           rm -rf timelimitx-linux-amd64-0.0.1.tgz
           mv timelimitx ~/go/bin/timelimitx
           
        
     #-----------------------------------------------
      # Installation Phase: Install all required tools
      #-----------------------------------------------
      - name: Install Go Tools (Katana, GoSpider, Hakrawler)
        run: |
          go install github.com/projectdiscovery/katana/cmd/katana@latest
          go install github.com/jaeles-project/gospider@latest
          go install github.com/hakluke/hakrawler@latest

      - name: Install Interlace (Python Tool)
        shell: bash
        run: |
          git clone https://github.com/codingo/Interlace.git
          cd Interlace
          python3 -m pip install -r requirements.txt
          cd ..

      #--------------------------------------------------
      # Execution Phase: Create command file and run tools
      #--------------------------------------------------
      - name: Create Commands for Interlace
        run: |
          # Create a command file for Interlace. _target_ is the placeholder.
          # Interlace's -o flag will handle output directories, so we don't need to redirect here.
          echo 'katana -u _target_ -ct 5m' -o _output_/katana.txt > cli.txt
          echo 'gospider -s _target_ -o _output_/gospider' >> cli.txt
          echo 'echo _target_ | hakrawler -u | sort -u > _output_/hakrawler.txt' >> cli.txt

      - name: Run Crawlers Concurrently with Interlace
        run: |
          # Define a unique output directory for this specific target
          OUTDIR="results/${{ matrix.target }}"
          mkdir -p "$OUTDIR"

          # Execute commands using the user-provided Interlace syntax
          Interlace/interlace.py \
            -t ${{ matrix.target }} \
            -threads 3 \
            -cL cli.txt \
            -o "$OUTDIR" \
            -v


      - name: Upload Domain Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: crawled-results-${{ matrix.target }} # Unique artifact for each domain
          path: results/${{ matrix.target }}/ # Uploads the results specific to this domain job
          retention-days: 1


