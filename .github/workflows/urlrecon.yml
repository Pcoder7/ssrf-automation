name: Automated URL & Vulnerability Scan

on:
  schedule:
    - cron: "0 10 * * *"  # Runs every day at 10:00 AM UTC
  workflow_dispatch:

permissions:
    contents: write

jobs:
  recon:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Update & Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl git python3 python3-pip

      # CHANGED: Step name corrected for clarity
      - name: Install gau
        run: |
          go install github.com/lc/gau/v2/cmd/gau@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Install gf
        run: |
          go install -v github.com/tomnomnom/gf@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      - name: Setup gf-patterns
        run: |
          git clone https://github.com/1ndianl33t/Gf-Patterns.git
          mkdir -p ~/.gf
          cp Gf-Patterns/*.json ~/.gf
          rm -rf Gf-Patterns

      - name: Install pipx and uro
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          pipx install uro

      - name: Create results directory
        run: mkdir -p results

      - name: Display domains.txt content
        run: cat -A domains.txt

      # CHANGED: This is the main logic block that has been heavily modified
      - name: Process Domain Recon
        run: |
          GAU_BLACKLIST="png,jpg,gif,css,ico,jpeg,bmp,svg,img,mp4,flv,ogv,webm,webp,mov,mp3,m4a,m4p,scss,tif,tiff,ttf,otf,woff,woff2,eot,htc,rtf,swf,image"
          
          URO_BLACKLIST="css ico jpg jpeg png bmp svg img gif mp4 flv ogv webm webp mov mp3 m4a m4p scss tif tiff ttf otf woff woff2 bmp ico eot htc rtf swf image js"
          if [ ! -f domains.txt ]; then
            echo "domains.txt file not found!"
            exit 1
          fi
          
          sed -i 's/\r$//' domains.txt
          readarray -t domains < domains.txt
          
          for domain in "${domains[@]}"; do
            if [ -z "$domain" ]; then
              echo "Empty line detected; skipping..."
              continue
            fi
          
            echo "Processing domain: '$domain'"
            mkdir -p "results/$domain"
          
            # MODIFIED: Removed subfinder and httpx.
            # Now, we run gau directly on the root domain and pipe its output
            # through the filtering and sorting tools in one efficient command.
            echo "[*] Fetching and filtering URLs for $domain with gau and uro"
            echo "$domain" | gau --subs --blacklist $GAU_BLACKLIST | sort -u | uro --filters hasparams > "results/$domain/filtered.txt"
          
            echo "[*] Extracting vulnerability candidates with gf"
            # These gf commands now run on the directly generated filtered.txt
            cat "results/$domain/filtered.txt" | gf ssrf > "results/$domain/ssrf.txt"
            cat "results/$domain/filtered.txt" | gf lfi > "results/$domain/lfi.txt"
            cat "results/$domain/filtered.txt" | gf sqli > "results/$domain/sqli.txt"
          done

      # CHANGED: Updated to show only the files that are now being created
      - name: Show Output Files
        run: |
          while IFS= read -r domain || [ -n "$domain" ]; do
            if [ -z "$domain" ]; then continue; fi
            echo "=== Results for $domain ==="
            echo "--- filtered.txt ---"
            cat "results/$domain/filtered.txt" || echo "Not found"
            echo "--- ssrf.txt ---"
            cat "results/$domain/ssrf.txt" || echo "Not found"
            echo "--- sqli.txt ---"
            cat "results/$domain/sqli.txt" || echo "Not found"
            echo "--- lfi.txt ---"
            cat "results/$domain/lfi.txt" || echo "Not found"
          done < domains.txt

      - name: Upload Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: recon-results
          path: results/

      - name: Commit and push
        run: |
          date > generated.txt
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "generated"
          git push
