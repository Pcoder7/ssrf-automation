name: Automated Subdomain & Live Host Scan

on:
  schedule:
    - cron: "0 10 * * *"  # Runs every day at 10:00 AM UTC
  workflow_dispatch:

jobs:
  recon:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Update & Install Dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y curl git python3 python3-pip

      # Install subfinder
      - name: Install subfinder
        run: |
          go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      # Install httpx
      - name: Install httpx
        run: |
          go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      # Install waybackurls
      - name: Install waybackurls
        run: |
          go install -v github.com/tomnomnom/waybackurls@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      # Install gf
      - name: Install gf
        run: |
          go install -v github.com/tomnomnom/gf@latest
          echo "$HOME/go/bin" >> $GITHUB_PATH

      # Setup gf-patterns
      - name: Setup gf-patterns
        run: |
          git clone https://github.com/1ndianl33t/Gf-Patterns.git
          mkdir -p ~/.gf
          cp Gf-Patterns/*.json ~/.gf

      # Install pipx and then uro (Python tool)
      - name: Install pipx and uro
        run: |
          python3 -m pip install --user pipx
          python3 -m pipx ensurepath
          echo "$HOME/.local/bin" >> $GITHUB_PATH
          pipx install uro

      - name: Create results directory
        run: mkdir -p results

      # Debug: Display the contents of domains.txt with special characters visible
      - name: Display domains.txt content
        run: cat -A domains.txt

      - name: Process Domain Recon
        run: |
          if [ ! -f domains.txt ]; then
            echo "domains.txt file not found!"
            exit 1
          fi
          # Convert domains.txt to Unix format (remove carriage returns)
          sed -i 's/\r$//' domains.txt
          # Load all domains into an array, ignoring empty lines
          readarray -t domains < domains.txt
          for domain in "${domains[@]}"; do
            if [ -z "$domain" ]; then
              echo "Empty line detected; skipping..."
            continue
            fi
            echo "Processing domain: '$domain'"
            mkdir -p "results/$domain"
            echo "[*] Running subfinder for $domain"
            subfinder -d "$domain" -silent -o "results/$domain/subdomains.txt"
            echo "[*] Filtering live hosts with httpx"
            cat "results/$domain/subdomains.txt" | httpx -silent -o "results/$domain/live.txt"
            echo "[*] Fetching archived URLs with waybackurls"
            cat "results/$domain/live.txt" | waybackurls > "results/$domain/wayback.txt"
            echo "[*] Filtering URLs with uro"
            cat "results/$domain/wayback.txt" | uro --filters hasparams > "results/$domain/filtered.txt"
            echo "[*] Extracting SSRF candidates with gf"
            gf -dump ssrf
            gf -dump redirect
            cat "results/$domain/filtered.txt" | gf ssrf > "results/$domain/ssrf.txt"
          done

      - name: Show Output Files
        run: |
          while IFS= read -r domain || [ -n "$domain" ]; do
            if [ -z "$domain" ]; then continue; fi
            echo "=== Results for $domain ==="
            echo "--- subdomains.txt ---"
            cat results/"$domain"/subdomains.txt || echo "Not found"
            echo "--- live.txt ---"
            cat results/"$domain"/live.txt || echo "Not found"
            echo "--- wayback.txt ---"
            cat results/"$domain"/wayback.txt || echo "Not found"
            echo "--- filtered.txt ---"
            cat results/"$domain"/filtered.txt || echo "Not found"
            echo "--- ssrf.txt ---"
            cat results/"$domain"/ssrf.txt || echo "Not found"
          done < domains.txt

      - name: Upload Results as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: recon-results
          path: results/

      - name: Commit and Push Results
        env:
          PAT_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          # Update remote URL with PAT for authentication
          git remote set-url origin https://x-access-token:${PAT_TOKEN}@github.com/Pcoder7/ssrf-automation.git
          git add results
          git commit -m "Add recon results from $(date)" || echo "No changes to commit"
          git push origin HEAD:main || echo "Push failed"
